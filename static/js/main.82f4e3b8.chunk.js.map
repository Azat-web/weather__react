{"version":3,"sources":["Api/fetchWeather.js","App.js","reportWebVitals.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","React","useState","setQuery","weather","setWeather","searchClick","setSearchClick","search","useEffect","event","console","log","className","class","type","placeholder","value","onChange","target","onKeyPress","href","onClick","aria-hidden","main","name","sys","country","Math","round","temp","src","icon","alt","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAIaA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACDC,IAAMC,IAAI,kDAAmD,CAChFC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPI,sCAEY,uBAChBC,EADgB,EAChBA,KADgB,kBAQjBA,GARiB,2CAAH,sDCgDVC,MAhDf,WAAgB,IAAD,EACcC,IAAMC,SAAS,IAD7B,mBACLX,EADK,KACEY,EADF,OAEkBF,IAAMC,SAAS,IAFjC,mBAELE,EAFK,KAEIC,EAFJ,OAG0BJ,IAAMC,UAAS,GAHzC,mBAGLI,EAHK,KAGQC,EAHR,KASNC,EAASP,IAAMQ,UAAN,uCAAgB,WAAOC,GAAP,eAAAlB,EAAA,0DACR,IAAhBc,EADwB,gCAENhB,EAAaC,GAFP,OAEnBQ,EAFmB,OAGzBY,QAAQC,IAAIb,GACZM,EAAWN,GACXI,EAAS,IACTI,GAAe,GANU,2CAAhB,sDAQZ,CAACD,IAGJ,OACG,sBAAKO,UAAU,iBAAf,UACG,sBAAKC,MAAM,aAAX,UACG,uBAAOC,KAAK,OAAOD,MAAM,aAAaE,YAAY,mIAA0BC,MAAO1B,EAAO2B,SAAU,SAACR,GAAD,OAAWP,EAASO,EAAMS,OAAOF,QAAQG,WAAYZ,IACzJ,mBAAGa,KAAK,IAAIC,QAnBG,WACrBf,GAAe,IAkB6BO,MAAM,aAA5C,SAAyD,mBAAGA,MAAM,eAAeS,cAAY,cAE/FnB,EAAQoB,MAAS,sBAAKX,UAAU,OAAf,UACf,qBAAIA,UAAU,YAAd,UACG,+BAAOT,EAAQqB,OACf,8BAAMrB,EAAQsB,IAAIC,aAErB,sBAAKd,UAAU,YAAf,UACIe,KAAKC,MAAMzB,EAAQoB,KAAKM,MACzB,2CAEH,sBAAKjB,UAAU,OAAf,UACIT,EAAQoB,KAAKM,OAAS1B,EAAQoB,KAAKM,MAAQ,GAAK,2HAC9C1B,EAAQoB,KAAKM,KAAO,IAAM1B,EAAQoB,KAAKM,MAAQ,GAAK,oLACjD1B,EAAQoB,KAAKM,KAAO,IAAM1B,EAAQoB,KAAKM,KAAO,EAAI,4JAC/C1B,EAAQoB,KAAKM,KAAO,GAAK1B,EAAQoB,KAAKM,OAAS,GAAK,wLACjD1B,EAAQoB,KAAKM,MAAQ,GAAK,6HAA2B,IACjE,qBAAKjB,UAAU,YAAYkB,IAAG,4CAAuC3B,EAAQA,QAAQ,GAAG4B,KAA1D,WAAyEC,IAAK7B,EAAQA,QAAQ,GAAG8B,cAC/H,4BAAI9B,EAAQA,QAAQ,GAAG8B,wBClCvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82f4e3b8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = 'ebaccce7a791576860d251188bde275e';\r\n\r\nexport const fetchWeather = async (query) => {\r\n    const { data } = await axios.get('https://api.openweathermap.org/data/2.5/weather', {\r\n        params: {\r\n            q: query,\r\n            units: 'metric',\r\n            APPID: API_KEY,\r\n        }\r\n    });\r\n    return data;\r\n}\r\n\r\n","import React from 'react';\nimport { fetchWeather } from './Api/fetchWeather';\n\n\nfunction App() {\n   const [query, setQuery] = React.useState('');\n   const [weather, setWeather] = React.useState({});\n   const [searchClick, setSearchClick] = React.useState(false);\n\n   const searchClickItem = () => {\n      setSearchClick(true);\n   }\n\n   const search = React.useEffect(async (event) => {\n      if (searchClick === true) {\n         const data = await fetchWeather(query);\n         console.log(data)\n         setWeather(data);\n         setQuery('');\n         setSearchClick(false)\n      }\n   }, [searchClick])\n\n\n   return (\n      <div className=\"main-container\">\n         <div class=\"search-box\">\n            <input type=\"text\" class=\"search-txt\" placeholder=\"Введите название города\" value={query} onChange={(event) => setQuery(event.target.value)} onKeyPress={search} />\n            <a href=\"#\" onClick={searchClickItem} class=\"search-btn\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i></a>\n         </div>\n         {weather.main && (<div className=\"city\">\n            <h2 className=\"city-name\">\n               <span>{weather.name}</span>\n               <sup>{weather.sys.country}</sup>\n            </h2>\n            <div className=\"city-temp\">\n               {Math.round(weather.main.temp)}\n               <sup>&deg;C</sup>\n            </div>\n            <div className=\"info\">\n               {weather.main.temp && (weather.main.temp >= 30 ? \"Жара... Пейте больше воды\" :\n                  weather.main.temp < 30 && weather.main.temp >= 15 ? \"Хорошая температура для прогулок\" :\n                     weather.main.temp < 15 && weather.main.temp > 0 ? \"Прохладно, одеватейсь теплее\" :\n                        weather.main.temp < 0 && weather.main.temp >= -15 ? \"Мороз... Доставайте всё самое теплое\" :\n                           weather.main.temp < -15 ? \"Лучше оставайтесь дома\" : \"\")}\n               <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description} />\n               <p>{weather.weather[0].description}</p>\n            </div>\n         </div>)}\n      </div>);\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}